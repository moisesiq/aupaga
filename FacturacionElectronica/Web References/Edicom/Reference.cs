//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace FacturacionElectronica.Edicom {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CFDiSoapBinding", Namespace="http://cfdi.service.ediwinws.edicom.com")]
    public partial class CFDiService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback changePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCfdiOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTimbreCfdiOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelaCFDiOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCfdiTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTimbreCfdiTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUUIDTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelaCFDiSignedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCfdiAckOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCfdiFromUUIDOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CFDiService() {
            this.Url = global::FacturacionElectronica.Properties.Settings.Default.FacturacionElectronica_Edicom_CFDiService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event changePasswordCompletedEventHandler changePasswordCompleted;
        
        /// <remarks/>
        public event getUUIDCompletedEventHandler getUUIDCompleted;
        
        /// <remarks/>
        public event getCfdiCompletedEventHandler getCfdiCompleted;
        
        /// <remarks/>
        public event getTimbreCfdiCompletedEventHandler getTimbreCfdiCompleted;
        
        /// <remarks/>
        public event cancelaCFDiCompletedEventHandler cancelaCFDiCompleted;
        
        /// <remarks/>
        public event getCfdiTestCompletedEventHandler getCfdiTestCompleted;
        
        /// <remarks/>
        public event getTimbreCfdiTestCompletedEventHandler getTimbreCfdiTestCompleted;
        
        /// <remarks/>
        public event getUUIDTestCompletedEventHandler getUUIDTestCompleted;
        
        /// <remarks/>
        public event cancelaCFDiSignedCompletedEventHandler cancelaCFDiSignedCompleted;
        
        /// <remarks/>
        public event getCfdiAckCompletedEventHandler getCfdiAckCompleted;
        
        /// <remarks/>
        public event getCfdiFromUUIDCompletedEventHandler getCfdiFromUUIDCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("changePasswordReturn")]
        public bool changePassword(string user, string password, string newPassword) {
            object[] results = this.Invoke("changePassword", new object[] {
                        user,
                        password,
                        newPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void changePasswordAsync(string user, string password, string newPassword) {
            this.changePasswordAsync(user, password, newPassword, null);
        }
        
        /// <remarks/>
        public void changePasswordAsync(string user, string password, string newPassword, object userState) {
            if ((this.changePasswordOperationCompleted == null)) {
                this.changePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePasswordOperationCompleted);
            }
            this.InvokeAsync("changePassword", new object[] {
                        user,
                        password,
                        newPassword}, this.changePasswordOperationCompleted, userState);
        }
        
        private void OnchangePasswordOperationCompleted(object arg) {
            if ((this.changePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePasswordCompleted(this, new changePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getUUIDReturn")]
        public string getUUID(string user, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file) {
            object[] results = this.Invoke("getUUID", new object[] {
                        user,
                        password,
                        file});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUUIDAsync(string user, string password, byte[] file) {
            this.getUUIDAsync(user, password, file, null);
        }
        
        /// <remarks/>
        public void getUUIDAsync(string user, string password, byte[] file, object userState) {
            if ((this.getUUIDOperationCompleted == null)) {
                this.getUUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUUIDOperationCompleted);
            }
            this.InvokeAsync("getUUID", new object[] {
                        user,
                        password,
                        file}, this.getUUIDOperationCompleted, userState);
        }
        
        private void OngetUUIDOperationCompleted(object arg) {
            if ((this.getUUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUUIDCompleted(this, new getUUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getCfdiReturn", DataType="base64Binary")]
        public byte[] getCfdi(string user, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file) {
            object[] results = this.Invoke("getCfdi", new object[] {
                        user,
                        password,
                        file});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCfdiAsync(string user, string password, byte[] file) {
            this.getCfdiAsync(user, password, file, null);
        }
        
        /// <remarks/>
        public void getCfdiAsync(string user, string password, byte[] file, object userState) {
            if ((this.getCfdiOperationCompleted == null)) {
                this.getCfdiOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCfdiOperationCompleted);
            }
            this.InvokeAsync("getCfdi", new object[] {
                        user,
                        password,
                        file}, this.getCfdiOperationCompleted, userState);
        }
        
        private void OngetCfdiOperationCompleted(object arg) {
            if ((this.getCfdiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCfdiCompleted(this, new getCfdiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getTimbreCfdiReturn", DataType="base64Binary")]
        public byte[] getTimbreCfdi(string user, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file) {
            object[] results = this.Invoke("getTimbreCfdi", new object[] {
                        user,
                        password,
                        file});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getTimbreCfdiAsync(string user, string password, byte[] file) {
            this.getTimbreCfdiAsync(user, password, file, null);
        }
        
        /// <remarks/>
        public void getTimbreCfdiAsync(string user, string password, byte[] file, object userState) {
            if ((this.getTimbreCfdiOperationCompleted == null)) {
                this.getTimbreCfdiOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTimbreCfdiOperationCompleted);
            }
            this.InvokeAsync("getTimbreCfdi", new object[] {
                        user,
                        password,
                        file}, this.getTimbreCfdiOperationCompleted, userState);
        }
        
        private void OngetTimbreCfdiOperationCompleted(object arg) {
            if ((this.getTimbreCfdiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTimbreCfdiCompleted(this, new getTimbreCfdiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("cancelaCFDiReturn")]
        public CancelaResponse cancelaCFDi(string user, string password, string rfc, [System.Xml.Serialization.XmlElementAttribute("uuid")] string[] uuid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pfx, string pfxPassword) {
            object[] results = this.Invoke("cancelaCFDi", new object[] {
                        user,
                        password,
                        rfc,
                        uuid,
                        pfx,
                        pfxPassword});
            return ((CancelaResponse)(results[0]));
        }
        
        /// <remarks/>
        public void cancelaCFDiAsync(string user, string password, string rfc, string[] uuid, byte[] pfx, string pfxPassword) {
            this.cancelaCFDiAsync(user, password, rfc, uuid, pfx, pfxPassword, null);
        }
        
        /// <remarks/>
        public void cancelaCFDiAsync(string user, string password, string rfc, string[] uuid, byte[] pfx, string pfxPassword, object userState) {
            if ((this.cancelaCFDiOperationCompleted == null)) {
                this.cancelaCFDiOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelaCFDiOperationCompleted);
            }
            this.InvokeAsync("cancelaCFDi", new object[] {
                        user,
                        password,
                        rfc,
                        uuid,
                        pfx,
                        pfxPassword}, this.cancelaCFDiOperationCompleted, userState);
        }
        
        private void OncancelaCFDiOperationCompleted(object arg) {
            if ((this.cancelaCFDiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelaCFDiCompleted(this, new cancelaCFDiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getCfdiTestReturn", DataType="base64Binary")]
        public byte[] getCfdiTest(string user, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file) {
            object[] results = this.Invoke("getCfdiTest", new object[] {
                        user,
                        password,
                        file});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCfdiTestAsync(string user, string password, byte[] file) {
            this.getCfdiTestAsync(user, password, file, null);
        }
        
        /// <remarks/>
        public void getCfdiTestAsync(string user, string password, byte[] file, object userState) {
            if ((this.getCfdiTestOperationCompleted == null)) {
                this.getCfdiTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCfdiTestOperationCompleted);
            }
            this.InvokeAsync("getCfdiTest", new object[] {
                        user,
                        password,
                        file}, this.getCfdiTestOperationCompleted, userState);
        }
        
        private void OngetCfdiTestOperationCompleted(object arg) {
            if ((this.getCfdiTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCfdiTestCompleted(this, new getCfdiTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getTimbreCfdiTestReturn", DataType="base64Binary")]
        public byte[] getTimbreCfdiTest(string user, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file) {
            object[] results = this.Invoke("getTimbreCfdiTest", new object[] {
                        user,
                        password,
                        file});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getTimbreCfdiTestAsync(string user, string password, byte[] file) {
            this.getTimbreCfdiTestAsync(user, password, file, null);
        }
        
        /// <remarks/>
        public void getTimbreCfdiTestAsync(string user, string password, byte[] file, object userState) {
            if ((this.getTimbreCfdiTestOperationCompleted == null)) {
                this.getTimbreCfdiTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTimbreCfdiTestOperationCompleted);
            }
            this.InvokeAsync("getTimbreCfdiTest", new object[] {
                        user,
                        password,
                        file}, this.getTimbreCfdiTestOperationCompleted, userState);
        }
        
        private void OngetTimbreCfdiTestOperationCompleted(object arg) {
            if ((this.getTimbreCfdiTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTimbreCfdiTestCompleted(this, new getTimbreCfdiTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getUUIDTestReturn")]
        public string getUUIDTest(string user, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file) {
            object[] results = this.Invoke("getUUIDTest", new object[] {
                        user,
                        password,
                        file});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUUIDTestAsync(string user, string password, byte[] file) {
            this.getUUIDTestAsync(user, password, file, null);
        }
        
        /// <remarks/>
        public void getUUIDTestAsync(string user, string password, byte[] file, object userState) {
            if ((this.getUUIDTestOperationCompleted == null)) {
                this.getUUIDTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUUIDTestOperationCompleted);
            }
            this.InvokeAsync("getUUIDTest", new object[] {
                        user,
                        password,
                        file}, this.getUUIDTestOperationCompleted, userState);
        }
        
        private void OngetUUIDTestOperationCompleted(object arg) {
            if ((this.getUUIDTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUUIDTestCompleted(this, new getUUIDTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("cancelaCFDiSignedReturn")]
        public CancelaResponse cancelaCFDiSigned(string user, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] sign) {
            object[] results = this.Invoke("cancelaCFDiSigned", new object[] {
                        user,
                        password,
                        sign});
            return ((CancelaResponse)(results[0]));
        }
        
        /// <remarks/>
        public void cancelaCFDiSignedAsync(string user, string password, byte[] sign) {
            this.cancelaCFDiSignedAsync(user, password, sign, null);
        }
        
        /// <remarks/>
        public void cancelaCFDiSignedAsync(string user, string password, byte[] sign, object userState) {
            if ((this.cancelaCFDiSignedOperationCompleted == null)) {
                this.cancelaCFDiSignedOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelaCFDiSignedOperationCompleted);
            }
            this.InvokeAsync("cancelaCFDiSigned", new object[] {
                        user,
                        password,
                        sign}, this.cancelaCFDiSignedOperationCompleted, userState);
        }
        
        private void OncancelaCFDiSignedOperationCompleted(object arg) {
            if ((this.cancelaCFDiSignedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelaCFDiSignedCompleted(this, new cancelaCFDiSignedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getCfdiAckReturn", DataType="base64Binary")]
        public byte[] getCfdiAck(string user, string password, [System.Xml.Serialization.XmlElementAttribute("uuid")] string[] uuid) {
            object[] results = this.Invoke("getCfdiAck", new object[] {
                        user,
                        password,
                        uuid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCfdiAckAsync(string user, string password, string[] uuid) {
            this.getCfdiAckAsync(user, password, uuid, null);
        }
        
        /// <remarks/>
        public void getCfdiAckAsync(string user, string password, string[] uuid, object userState) {
            if ((this.getCfdiAckOperationCompleted == null)) {
                this.getCfdiAckOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCfdiAckOperationCompleted);
            }
            this.InvokeAsync("getCfdiAck", new object[] {
                        user,
                        password,
                        uuid}, this.getCfdiAckOperationCompleted, userState);
        }
        
        private void OngetCfdiAckOperationCompleted(object arg) {
            if ((this.getCfdiAckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCfdiAckCompleted(this, new getCfdiAckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace="http://cfdi.service.ediwinws.edicom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getCfdiFromUUIDReturn", DataType="base64Binary")]
        public byte[] getCfdiFromUUID(string user, string password, string rfc, [System.Xml.Serialization.XmlElementAttribute("uuid")] string[] uuid) {
            object[] results = this.Invoke("getCfdiFromUUID", new object[] {
                        user,
                        password,
                        rfc,
                        uuid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCfdiFromUUIDAsync(string user, string password, string rfc, string[] uuid) {
            this.getCfdiFromUUIDAsync(user, password, rfc, uuid, null);
        }
        
        /// <remarks/>
        public void getCfdiFromUUIDAsync(string user, string password, string rfc, string[] uuid, object userState) {
            if ((this.getCfdiFromUUIDOperationCompleted == null)) {
                this.getCfdiFromUUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCfdiFromUUIDOperationCompleted);
            }
            this.InvokeAsync("getCfdiFromUUID", new object[] {
                        user,
                        password,
                        rfc,
                        uuid}, this.getCfdiFromUUIDOperationCompleted, userState);
        }
        
        private void OngetCfdiFromUUIDOperationCompleted(object arg) {
            if ((this.getCfdiFromUUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCfdiFromUUIDCompleted(this, new getCfdiFromUUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://cfdi.service.ediwinws.edicom.com")]
    public partial class CancelaResponse {
        
        private string ackField;
        
        private string textField;
        
        private string[] uuidsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ack {
            get {
                return this.ackField;
            }
            set {
                this.ackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public string[] uuids {
            get {
                return this.uuidsField;
            }
            set {
                this.uuidsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void changePasswordCompletedEventHandler(object sender, changePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUUIDCompletedEventHandler(object sender, getUUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCfdiCompletedEventHandler(object sender, getCfdiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCfdiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCfdiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTimbreCfdiCompletedEventHandler(object sender, getTimbreCfdiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTimbreCfdiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTimbreCfdiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelaCFDiCompletedEventHandler(object sender, cancelaCFDiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelaCFDiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelaCFDiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CancelaResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CancelaResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCfdiTestCompletedEventHandler(object sender, getCfdiTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCfdiTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCfdiTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTimbreCfdiTestCompletedEventHandler(object sender, getTimbreCfdiTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTimbreCfdiTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTimbreCfdiTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUUIDTestCompletedEventHandler(object sender, getUUIDTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUUIDTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUUIDTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelaCFDiSignedCompletedEventHandler(object sender, cancelaCFDiSignedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelaCFDiSignedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelaCFDiSignedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CancelaResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CancelaResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCfdiAckCompletedEventHandler(object sender, getCfdiAckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCfdiAckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCfdiAckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCfdiFromUUIDCompletedEventHandler(object sender, getCfdiFromUUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCfdiFromUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCfdiFromUUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591